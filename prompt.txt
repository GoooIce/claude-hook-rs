# Claude Hook Advisor - Rust Best Practices Implementation

## Project Context
Claude Hook Advisor is a Rust CLI tool that integrates with Claude Code hooks to provide intelligent command suggestions and semantic directory aliasing. The core functionality is complete and working (v0.2.0), but we need to improve code quality to meet production Rust standards.

## Current Status
- ✅ **Functionality Complete**: All features working (command mapping + directory aliasing)
- ✅ **Tests Passing**: 28 tests (24 unit + 4 integration)
- ✅ **Architecture Solid**: Modular design with triple-hook system
- ❌ **Code Quality**: Needs best practices improvements

## Immediate Task: Rust Best Practices Implementation

**Goal**: Systematically improve code quality while maintaining all functionality.

**Reference Document**: `~/Documents/Documentation/claude-hook-advisor/rust-best-practices-review.md`

### Phase 1: Critical Error Handling (PRIORITY 1)

**Problem**: 53 instances of `unwrap()` and `expect()` found across codebase
**Impact**: Production code crashes on unexpected input

**Start with these files**:
1. `src/cli.rs` - Fix CLI argument handling
2. `src/directory.rs` - Fix path resolution error handling  
3. `src/hooks.rs` - Fix JSON parsing in production code

**Key Changes Needed**:
```rust
// ❌ Current problematic pattern
let config_path = matches.get_one::<String>("config").unwrap();

// ✅ Better - descriptive expect for programmer errors
let config_path = matches.get_one::<String>("config")
    .expect("config argument has default value");

// ✅ Best - proper Result handling for user errors
fn load_config_safe(path: &str) -> Result<Config, ConfigError> {
    // Use ? operator for error propagation
}
```

### Phase 2: API Design Cleanup (PRIORITY 1)

**Problem**: Public API exposes too many internals
**Impact**: Confusing for users, breaks encapsulation

**Fix `src/lib.rs`**:
```rust
// ❌ Current - too much exposed
pub mod types;
pub mod config; 
pub mod hooks;
// etc.

// ✅ Better - hide implementation details
pub use cli::run_cli;
pub use directory::resolve_directory;
pub use types::DirectoryResolution;

// Private modules
mod types;
mod config;
// etc.
```

### Phase 3: Performance & Allocations (PRIORITY 2)

**Problem**: 75 instances of unnecessary string allocations
**Fix patterns**:
- Use `&str` instead of `String` in function parameters
- Cache compiled regexes with `once_cell`
- Replace `.to_string()` with `.into()` where appropriate

### Success Criteria
- [ ] Zero `unwrap()` in production code paths
- [ ] Clean public API (< 10 exposed items)
- [ ] All tests still passing
- [ ] No performance regressions
- [ ] Comprehensive error messages

### Commands to Start

```bash
# Navigate to project
cd /Users/nav/Projects/crates/claude-hook-advisor

# Check current state
make lint
make test

# Identify specific unwrap() locations
rg "unwrap\(\)" src/ --type rust -n

# Start with highest priority fixes
# 1. Fix src/cli.rs error handling
# 2. Fix src/directory.rs error handling  
# 3. Fix src/hooks.rs error handling
# 4. Clean up src/lib.rs API surface
```

### Implementation Strategy
1. **One file at a time** - Don't break working functionality
2. **Run tests after each change** - Ensure no regressions
3. **Focus on production code** - Test unwrap() calls are acceptable
4. **Maintain API compatibility** - Don't break existing usage

### Key Principles
- **Error handling**: Use `Result<T, E>` and `?` operator
- **API design**: Hide implementation, expose only what's needed
- **Performance**: Minimize allocations, cache expensive operations
- **Documentation**: Add examples to public functions

---

**Next Steps**: Start by examining `src/cli.rs` and replacing unwrap() calls with proper error handling. Work systematically through the priority list while ensuring tests continue to pass.